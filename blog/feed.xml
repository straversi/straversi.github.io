<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>steven.codes</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://steven.codes/</link>
    <atom:link href="http://steven.codes/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 07 Dec 2015 17:58:52 -0800</pubDate>
    <lastBuildDate>Mon, 07 Dec 2015 17:58:52 -0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Constraint Satisfaction With Sudoku</title>
        <description>&lt;p&gt;The permalink format for posts on this site is &lt;code class=&quot;highlighter-rouge&quot;&gt;:categories/:title&lt;/code&gt;. That way I can direct students to steven.codes/cs10 for easy access to all cs10 resources.&lt;/p&gt;

&lt;h2 id=&quot;organizing-assets&quot;&gt;Organizing Assets&lt;/h2&gt;
&lt;p&gt;I prefer to structure assets similarly to posts. For example, if there is a post at &lt;code class=&quot;highlighter-rouge&quot;&gt;site.baseurl/cs10/2048-merge&lt;/code&gt;, then I’d like the corresponding assets to be stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/posts/cs10/2048-merge&lt;/code&gt;. This means I have to go through this path every time I’d like to include a resource. &lt;a href=&quot;https://github.com/samrayner/jekyll-asset-path-plugin&quot;&gt;Asset path tag&lt;/a&gt; is a plugin that I use to manage these relative paths. This is what including an image looks like with asset path:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;asset_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;cat_of_the_month.png&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Many of my posts require custom JavaScript, and sometimes custom CSS (see &lt;a href=&quot;/cs10/2048-merge/&quot;&gt;2048 Merge&lt;/a&gt;). I don’t want these custom resources loading for every post, so I created two front matter variables, &lt;code class=&quot;highlighter-rouge&quot;&gt;custom_css&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;custom_js&lt;/code&gt;. In &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/header.html&lt;/code&gt;, I added the following script:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% if page.custom_css %}
  {% for stylesheet in page.custom_css %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{% asset_path {{ stylesheet }}.css %}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;screen&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% endfor %}
{% endif %}

{% if page.custom_js %}
  {% for js_file in page.custom_js %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;{% asset_path {{ js_file }}.js %}&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  {% endfor %}
{% endif %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some JavaScript snippets need access to the assets of the post. It would be bad practice to include file paths in the JavaScript itself. To allow for better separation of concerns, I pass asset_path to the js from the post. An example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;tileSetup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{% asset_path 2048_tiles/%}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll.&lt;/p&gt;

</description>
        <pubDate>Thu, 03 Dec 2015 11:47:36 -0800</pubDate>
        <link>http://steven.codes/constraint-satisfaction-with-sudoku/</link>
        <guid isPermaLink="true">http://steven.codes/constraint-satisfaction-with-sudoku/</guid>
        
        
      </item>
    
      <item>
        <title>My Jekyll Setup</title>
        <description>&lt;p&gt;The permalink format for posts on this site is &lt;code class=&quot;highlighter-rouge&quot;&gt;:categories/:title&lt;/code&gt;. That way I can direct students to steven.codes/cs10 for easy access to all cs10 resources.&lt;/p&gt;

&lt;h2 id=&quot;organizing-assets&quot;&gt;Organizing Assets&lt;/h2&gt;
&lt;p&gt;I prefer to structure assets similarly to posts. For example, if there is a post at &lt;code class=&quot;highlighter-rouge&quot;&gt;site.baseurl/cs10/2048-merge&lt;/code&gt;, then I’d like the corresponding assets to be stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/posts/cs10/2048-merge&lt;/code&gt;. This means I have to go through this path every time I’d like to include a resource. &lt;a href=&quot;https://github.com/samrayner/jekyll-asset-path-plugin&quot;&gt;Asset path tag&lt;/a&gt; is a plugin that I use to manage these relative paths. This is what including an image looks like with asset path:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;asset_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;cat_of_the_month.png&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Many of my posts require custom JavaScript, and sometimes custom CSS (see &lt;a href=&quot;/cs10/2048-merge/&quot;&gt;2048 Merge&lt;/a&gt;). I don’t want these custom resources loading for every post, so I created two front matter variables, &lt;code class=&quot;highlighter-rouge&quot;&gt;custom_css&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;custom_js&lt;/code&gt;. In &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/header.html&lt;/code&gt;, I added the following script:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% if page.custom_css %}
  {% for stylesheet in page.custom_css %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{% asset_path {{ stylesheet }}.css %}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;screen&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% endfor %}
{% endif %}

{% if page.custom_js %}
  {% for js_file in page.custom_js %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;{% asset_path {{ js_file }}.js %}&#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  {% endfor %}
{% endif %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some JavaScript snippets need access to the assets of the post. It would be bad practice to include file paths in the JavaScript itself. To allow for better separation of concerns, I pass asset_path to the js from the post. An example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;tileSetup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{% asset_path 2048_tiles/%}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll.&lt;/p&gt;

</description>
        <pubDate>Sun, 22 Nov 2015 11:47:36 -0800</pubDate>
        <link>http://steven.codes/my-jekyll-setup/</link>
        <guid isPermaLink="true">http://steven.codes/my-jekyll-setup/</guid>
        
        
      </item>
    
      <item>
        <title>Simulating Gravity With a Linear Transform</title>
        <description>&lt;h1 id=&quot;testing&quot;&gt;TESTING&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/simulating-gravity-with-a-linear-transform/test.png&quot; alt=&quot;Image of Yaktocat&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Nov 2015 17:47:36 -0800</pubDate>
        <link>http://steven.codes/simulating-gravity-with-a-linear-transform/</link>
        <guid isPermaLink="true">http://steven.codes/simulating-gravity-with-a-linear-transform/</guid>
        
        
      </item>
    
      <item>
        <title>Constant 2048 Solution</title>
        <description>&lt;h1 id=&quot;testing&quot;&gt;TESTING&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/constant-2048-solution/test.png&quot; alt=&quot;Image of Yaktocat&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Nov 2015 17:47:36 -0800</pubDate>
        <link>http://steven.codes/constant-2048-solution/</link>
        <guid isPermaLink="true">http://steven.codes/constant-2048-solution/</guid>
        
        
      </item>
    
      <item>
        <title>2048 Merge</title>
        <description>&lt;!-- JavaScript and CSS loaded in _includes/head.html.
     Check front matter. --&gt;

&lt;p&gt;In the fad game 2048, you press arrow keys to move tiles across a board in
one of four possible directions. Let’s explore an intuitive algorithm for
accomplishing this.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;basic-slide&quot;&gt;Basic Slide&lt;/h2&gt;

&lt;p&gt;Let’s start with the case of a single tile.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;important&quot;&gt;Note:&lt;/span&gt; Throughout this exploration, we will
only ever be considering a single column. This is because in a true 2048
board with 4 columns, each column is independent from the rest when it
comes to merging tiles upward.&lt;/p&gt;

&lt;p&gt;What happens when we press the UP arrow? The tile should move up until it
hits an edge.&lt;/p&gt;

&lt;div class=&quot;board-wrapper&quot;&gt;
&lt;div class=&quot;board-2048&quot; style=&quot;width:62.5px;height:250px;&quot;&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;2&quot; data-endval=&quot;2&quot; data-begin=&quot;3&quot; data-end=&quot;0&quot; /&gt;
&lt;/div&gt;
&lt;label onclick=&quot;mergeBoard(this)&quot;&gt;&lt;input type=&quot;checkbox&quot; /&gt;&lt;span&gt;merge up&lt;/span&gt;&lt;/label&gt;
&lt;/div&gt;

&lt;p&gt;Let’s start a list of rules that we have to keep in mind. We’ll keep adding
to it as we go.&lt;/p&gt;

&lt;p&gt;Rules&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Move up until:
      &lt;ul&gt;
        &lt;li&gt;There is an edge&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;another-tile&quot;&gt;Another Tile&lt;/h2&gt;

&lt;p&gt;Now we’ll progress our algorithm by looking at a more complex board. It will
have two tiles of different values.&lt;/p&gt;

&lt;p&gt;What happens when we press the UP arrow? The top tile, following our rules
list, will move up until there is an edge. Then it’s the bottom tile’s turn.
It starts to move up… and then encounters a new situation. Instead of
hitting an edge, it hits another tile. What should happen?&lt;/p&gt;

&lt;div class=&quot;board-wrapper&quot;&gt;
&lt;div class=&quot;board-2048&quot; style=&quot;width:62.5px;height:250px;&quot;&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;2&quot; data-endval=&quot;2&quot; data-begin=&quot;1&quot; data-end=&quot;0&quot; /&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;4&quot; data-endval=&quot;4&quot; data-begin=&quot;3&quot; data-end=&quot;1&quot; /&gt;
&lt;/div&gt;
&lt;label onclick=&quot;mergeBoard(this)&quot;&gt;&lt;input type=&quot;checkbox&quot; /&gt;&lt;span&gt;merge up&lt;/span&gt;&lt;/label&gt;
&lt;/div&gt;

&lt;p&gt;The tile should stop as if it has hit an edge. It now occupies the spot
directly under the tile above it. Let’s update our rules to reflect
this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Move up until:
      &lt;ul&gt;
        &lt;li&gt;There is an edge&lt;/li&gt;
        &lt;li&gt;There is another tile&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;important&quot;&gt;Notice:&lt;/span&gt; This brings up a question. Which tile should we move up first? If we move the bottom tile up first, it would stop when it got to the
tile above it. Then we’d move the tile above it, and it’d stop at the edge.
What’s left is a gap between the two tiles! This is not what we want.
Therefore, we’ll make an observation that we should move the tiles up in
order from top to bottom.&lt;/p&gt;

&lt;h2 id=&quot;merging-tiles&quot;&gt;Merging Tiles&lt;/h2&gt;

&lt;p&gt;If you missed the notice right before this section definitely read it.&lt;/p&gt;

&lt;p&gt;Let’s make things more complex again. In our newest board, there are two
tiles of the same value.&lt;/p&gt;

&lt;p&gt;What happens when we press the UP arrow? Now things are getting interesting.
The top tile, following our rules list, will move up until there is an edge.
Then it’s the bottom tile’s turn. It starts to move up… and then
encounters a new situation. It hits another tile with the same value. What
should happen?&lt;/p&gt;

&lt;div class=&quot;board-wrapper&quot;&gt;
&lt;div class=&quot;board-2048&quot; style=&quot;width:62.5px;height:250px;&quot;&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;2&quot; data-endval=&quot;4&quot; data-begin=&quot;1&quot; data-end=&quot;0&quot; /&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;2&quot; data-endval=&quot;0&quot; data-begin=&quot;3&quot; data-end=&quot;0&quot; /&gt;
&lt;/div&gt;
&lt;label onclick=&quot;mergeBoard(this)&quot;&gt;&lt;input type=&quot;checkbox&quot; /&gt;&lt;span&gt;merge up&lt;/span&gt;&lt;/label&gt;
&lt;/div&gt;

&lt;p&gt;The tiles should merge into a new tile of twice their values. Let’s add a
rule:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Move up until:
      &lt;ul&gt;
        &lt;li&gt;There is an edge&lt;/li&gt;
        &lt;li&gt;There is another tile…
          &lt;ul&gt;
            &lt;li&gt;Different value? Do nothing.&lt;/li&gt;
            &lt;li&gt;Same value? Merge with it.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;merge-mishaps&quot;&gt;Merge Mishaps&lt;/h2&gt;

&lt;p&gt;Let’s add one more twist of complexity. Our next board will have three tiles
on it: Two of the same value and one of twice their value.&lt;/p&gt;

&lt;p&gt;What happens when we press the UP arrow? The top tile, following our rules
list, will move up until there is an edge. Then it’s the next tile’s turn.
It moves up and encounters a tile. Does it have the same value? Yes it does,
so it will merge into it to make a new tile of twice its value. Then it’s
the bottom tile’s turn. It moves up, and encounters the freshly merged tile
above it… What should happen?&lt;/p&gt;

&lt;div class=&quot;board-wrapper&quot;&gt;
&lt;div class=&quot;board-2048&quot; style=&quot;width:62.5px;height:250px;&quot;&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;4&quot; data-endval=&quot;8&quot; data-begin=&quot;1&quot; data-end=&quot;0&quot; /&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;4&quot; data-endval=&quot;0&quot; data-begin=&quot;2&quot; data-end=&quot;0&quot; /&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;8&quot; data-endval=&quot;8&quot; data-begin=&quot;3&quot; data-end=&quot;1&quot; /&gt;
&lt;/div&gt;
&lt;label onclick=&quot;mergeBoard(this)&quot;&gt;&lt;input type=&quot;checkbox&quot; /&gt;&lt;span&gt;merge up&lt;/span&gt;&lt;/label&gt;
&lt;/div&gt;

&lt;p&gt;The third tile should stop! One of the rules of 2048 is that a tile cannot
be merged more than once per key press. Let’s add a rule to take care of
this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Move up until:
      &lt;ul&gt;
        &lt;li&gt;There is an edge&lt;/li&gt;
        &lt;li&gt;There is another tile…
          &lt;ul&gt;
            &lt;li&gt;Different value? Do nothing.&lt;/li&gt;
            &lt;li&gt;Same value?
              &lt;ul&gt;
                &lt;li&gt;Already merged that tile? Do nothing.&lt;/li&gt;
                &lt;li&gt;Haven’t merged that tile yet? Merge with it.&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have all of the parts of a perfectly fine 2048 Merging algorithm. These
simple rules are all it takes to power an addicting and popular game. There
are more things we could do: perhaps you may find it useful to keep track of
whether or not a tile has been moved as a result of attempting a merge (this
could be useful when deciding whether to add a new tile when implementing
a full 2048 game).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You can write this algorithm iteratively or recursively. Explore, and
write your own improved version now that you understand the basics.
There are many other ways to achieve the merge effect, and some solutions
can get very clever and efficient. &lt;span&gt;&amp;amp;#9632&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;testing&quot;&gt;TESTING&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/cs10/2048-merge/test.png&quot; alt=&quot;Image of Yaktocat&quot; /&gt;&lt;/p&gt;

&lt;script&gt;
  // Run setup method. Find in 2048_board_merge.js from YAML front matter.
  tileSetup(&quot;/assets/posts/cs10/2048-merge/2048_tiles/&quot;);
&lt;/script&gt;

</description>
        <pubDate>Thu, 12 Nov 2015 03:47:36 -0800</pubDate>
        <link>http://steven.codes/cs10/2048-merge/</link>
        <guid isPermaLink="true">http://steven.codes/cs10/2048-merge/</guid>
        
        
        <category>cs10</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 11 Nov 2015 11:47:36 -0800</pubDate>
        <link>http://steven.codes/jekyll/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://steven.codes/jekyll/welcome-to-jekyll/</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
