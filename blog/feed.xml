<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>steven.codes</title>
    <description>I post here about some of the things I&#39;m working on.
</description>
    <link>http://steven.codes/blog/</link>
    <atom:link href="http://steven.codes/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 20 Feb 2016 19:02:57 -0800</pubDate>
    <lastBuildDate>Sat, 20 Feb 2016 19:02:57 -0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Pixel Mapping</title>
        <description>&lt;p&gt;hello&lt;/p&gt;

&lt;div class=&quot;image-gallery&quot;&gt;
&lt;img src=&quot;/blog/assets/posts/pixel-mapping/test.png &quot; /&gt;
&lt;img src=&quot;/blog/assets/posts/pixel-mapping/test.png &quot; /&gt;
&lt;img src=&quot;/blog/assets/posts/pixel-mapping/test.png &quot; /&gt;
&lt;img src=&quot;/blog/assets/posts/pixel-mapping/test.png &quot; /&gt;
&lt;img src=&quot;/blog/assets/posts/pixel-mapping/test.png &quot; /&gt;
&lt;img src=&quot;/blog/assets/posts/pixel-mapping/test.png &quot; /&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 06 Feb 2016 01:47:36 -0800</pubDate>
        <link>http://steven.codes/blog/pixel-mapping/</link>
        <guid isPermaLink="true">http://steven.codes/blog/pixel-mapping/</guid>
        
        <category>draft</category>
        
        
      </item>
    
      <item>
        <title>Google Sheets DB Tutorial</title>
        <description>&lt;p&gt;The first part (the Google Sheets part) of this tutorial is first a restatement, then an extension, of &lt;a href=&quot;https://mashe.hawksey.info/2014/07/google-sheets-as-a-database-insert-with-apps-script-using-postget-methods-with-ajax-example/&quot;&gt;Martin Hawksey’s Google Sheets as a Database&lt;/a&gt; article, with my own insights interjected. I include commentary from my experiences building &lt;a href=&quot;/home&quot;&gt;a “community” homepage&lt;/a&gt; based on this idea.&lt;/p&gt;

&lt;h2 id=&quot;the-google-sheets-part&quot;&gt;The Google Sheets Part&lt;/h2&gt;

&lt;p&gt;The first thing you’ll do is create a new Google Sheet. Head to menu, and click &lt;code&gt;Tools &amp;gt; Script editor...&lt;/code&gt; to launch the IDE. For starters, let’s copy and paste Martin Hawksey’s Apps Script snippet into the editor. Here it is for convenience:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/straversi/2fd82477504baa0b347c&quot;&gt;https://gist.github.com/straversi/2fd82477504baa0b347c&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the bottom of the snippet is a function called &lt;code&gt;setup&lt;/code&gt;, reproduced here:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SpreadsheetApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getActiveSpreadsheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;SCRIPT_PROP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’re about to run it, so what does it do? The first line of the function grabs what’s called the “Active Spreadsheet”, a.k.a. the spreadsheet that you opened this script editor through. (Notice that when you try to close your spreadsheet tab, the script editor leaves along with it). The second line will let this script see the Active Spreadsheet even when your around, by remembering its Id. Now that we know what’s happening…&lt;/p&gt;

&lt;p&gt;As the snippet instructs, the first thing to do is select &lt;code&gt;Run &amp;gt; setup&lt;/code&gt;. Google may tell you “Authorization required / This app needs authorization to run”. That’s fine, hit “Continue”. Your script needs access to (1) View and manage your spreadsheets and (2) View and manage data associated with the application. Allow both. If you’d like, select &lt;code&gt;File &amp;gt; Project properties&lt;/code&gt;, then select the &lt;code&gt;Script properties&lt;/code&gt; tab. That key wasn’t there before; it’s the same Id that appears at the end of the URL of your spreadsheet. The script and the sheet are now together forever.&lt;/p&gt;

&lt;p&gt;Time to deploy your script: select &lt;code&gt;Publish &amp;gt; Deploy as web app...&lt;/code&gt;. Choose to execute the app as yourself, and make sure to grant everyone access, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/posts/google-sheets-db-tutorial/deploy.png &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congrats. Save the “Current web app URL” that you are given, we’ll use it in a second. Don’t worry, you can recover it whenever you want by going back to &lt;code&gt;Publish &amp;gt; Deploy as web app...&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;in-action&quot;&gt;In Action&lt;/h3&gt;

&lt;p&gt;Let’s make something happen. Go to your Google Sheet, and add “Timestamp” to A1 and “Name” to B1; these will be our example headers. I’ve written two scripts, one jQuery and one plain JavaScript for you to play around with posting to the sheet. Take your pick, and try them out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/straversi/Google-sheet-interfaces/blob/master/JQuery-post.html&quot;&gt;jQuery version&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/straversi/Google-sheet-interfaces/blob/master/JavaScript-post.html&quot;&gt;Vanilla JS version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;updates-and-handling-gets&quot;&gt;Updates, and Handling GETs&lt;/h2&gt;

&lt;p&gt;Notice something? The current App Script code that we have attached to the spreadsheet doesn’t actually handle GET’s in a useful way. Our GET and POST will end up sharing some code. In &lt;code&gt;handleResponse(e)&lt;/code&gt; we should keep around these bits:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SpreadsheetApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SCRIPT_PROP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sheet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSheetByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;POST_SHEET_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ContentService&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTextOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resultObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setMimeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ContentService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MimeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In between, we’ll make an appropriate call to either &lt;code&gt;handleGet&lt;/code&gt; or &lt;code&gt;handlePost&lt;/code&gt;, which we define. We can pass along a parameter to &lt;code&gt;handleResponse&lt;/code&gt; which indicates which of the two to call. Notice how I changed the object in &lt;code&gt;createTextOutput&lt;/code&gt;. &lt;code&gt;resultObject&lt;/code&gt; in my case captures the return value of &lt;code&gt;handlePost&lt;/code&gt; or &lt;code&gt;handleGet&lt;/code&gt;. All of this being said, it may make more sense for you to skip the &lt;code&gt;handleResponse&lt;/code&gt; call all together, especially if your GETs and POSTs will be working with different sheets.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;important&quot;&gt;Note:&lt;/span&gt; If you separate your GET and POST handling, you should remember to move the &lt;code&gt;LockService&lt;/code&gt; portions into your POST handler. We don’t want to be unnecessarily restricting read operations. Furthermore, App Script has changed since the script we began with was written. &lt;code&gt;LockService.getPublicLock&lt;/code&gt; is now &lt;code&gt;LockService.getScriptLock&lt;/code&gt;. Be sure to reflect this change in your code. For more on other types of locks, see &lt;a href=&quot;https://developers.google.com/apps-script/reference/lock/lock-service&quot;&gt;Class LockService&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;safari-and-how-to-trick-it&quot;&gt;Safari, And How to Trick It&lt;/h2&gt;

&lt;p&gt;Our “database” operations should be successful so far. That is, except for this odd corner case: Safari, using HTTP (That is, everything works fine on the  the &lt;code&gt;file:///&lt;/code&gt; protocol, so if you test websites using &lt;code&gt;file:///&lt;/code&gt;, then you may not have noticed!).&lt;/p&gt;

&lt;p&gt;What’s the problem? When we try to do our simple post, we get these errors in the console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/posts/google-sheets-db-tutorial/safari_http_errors.png &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aha, but if I check our spreadsheet database, I see that the &lt;strong&gt;POST still successfully got the correct data to the sheet!&lt;/strong&gt; So it would seem that the problem here is that Safari can tell Google stuff, but Google can’t tell Safari stuff back. Which causes problems: (a) GETs are useless now, and (b) we can’t tell the difference between a successful and unsuccessful POST, because we can’t get our result key back.&lt;/p&gt;

&lt;h3 id=&quot;the-fix&quot;&gt;The Fix&lt;/h3&gt;

&lt;p&gt;To make a long story short, what we have here is a problem with &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;Cross-Origin Resource Sharing&lt;/a&gt; (CORS). Safari won’t accept Google’s response unless it has a certain header specifying &lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt;. This is a result of Safari adhering to W3C spec very closely. To fix this, we’ll have someone else make our requests for us. If we append &lt;code&gt;http://crossorigin.me/&lt;/code&gt; to the beginning of our request URL (https://script.google.com/macros/s/AKfycb…), the folks over at crossorigin will make a nice request from a place that doesn’t care so much about CORS for us. We then receive the reply as Google sent it.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Feb 2016 01:47:36 -0800</pubDate>
        <link>http://steven.codes/blog/google-sheets-db-tutorial/</link>
        <guid isPermaLink="true">http://steven.codes/blog/google-sheets-db-tutorial/</guid>
        
        
      </item>
    
      <item>
        <title>Flipping Tables: A Custom Bash Prompt</title>
        <description>&lt;p&gt;I’ve been with vanilla Terminal and bash for forever now. I had a brief stint with zsh, but even the extremely slight load delay was too much for me. So I turned to customizing my trusty old bash shell.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;?&lt;/code&gt; is a value-storing &lt;em&gt;entity&lt;/em&gt;. Referencing it with &lt;code&gt;$?&lt;/code&gt; yields the exit status of the last-executed command! I thought it’d be fun to use it to power a fun bash prompt.&lt;/p&gt;

&lt;p&gt;I ended up deciding on the table-flipping dude. He would sit there, calmly next to his table. At the first sight of an error, he’d flip it. Then, if I corrected my ways, he’d set the table back down. If I made &lt;em&gt;2 or more errors in a row&lt;/em&gt;, he’d go into super-angry mode. To accomplish this, I’d keep track of two variables, &lt;code&gt;curErr&lt;/code&gt; and &lt;code&gt;lastErr&lt;/code&gt;, updating them according to &lt;code&gt;$?&lt;/code&gt;. Here’s the meat of it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;curErr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;curErr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$curErr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$lastErr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Two consecutive errors&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$&amp;#39;(╯ಠ益ಠ)╯彡┻━┻&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$curErr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# One error&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$&amp;#39;(╯°□°)╯︵┻━┻ &amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$lastErr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# One success&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$&amp;#39; ┬──┬ ﾉ(°—°ﾉ)&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Two consecutive successes&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$&amp;#39;( °—°)   ┬──┬&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;lastErr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$curErr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the results:&lt;/p&gt;

&lt;video class=&quot;share-video&quot; id=&quot;share-video&quot; poster=&quot;https://thumbs.gfycat.com/EagerInferiorClingfish-poster.jpg&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt;&lt;source id=&quot;webmSource&quot; src=&quot;https://zippy.gfycat.com/EagerInferiorClingfish.webm&quot; type=&quot;video/webm&quot; /&gt;&lt;source id=&quot;mp4Source&quot; src=&quot;https://zippy.gfycat.com/EagerInferiorClingfish.mp4&quot; type=&quot;video/mp4&quot; /&gt;
    Sorry, your browser doesn&#39;t support HTML5 video.
&lt;/video&gt;

&lt;p&gt;All in all, a pretty fun addition to my routine.&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Feb 2016 01:47:36 -0800</pubDate>
        <link>http://steven.codes/blog/flipping-tables-a-custom-bash-prompt/</link>
        <guid isPermaLink="true">http://steven.codes/blog/flipping-tables-a-custom-bash-prompt/</guid>
        
        
      </item>
    
      <item>
        <title>Slide to Reveal With CSS</title>
        <description>&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;All I wanted was a div that could hide text and slide out of the way when hovered over. Stack Overflow yielded… disappointing results when I searched for a solution. Some people had thought of transitioning &lt;code&gt;width&lt;/code&gt; between some value and &lt;code&gt;auto&lt;/code&gt;, but quickly figured out that &lt;a href=&quot;https://css-tricks.com/css-animate-fromto-auto/&quot;&gt;no browser can successfully do this&lt;/a&gt;. Here’s what I came up with.&lt;/p&gt;

&lt;h2 id=&quot;a-solution&quot;&gt;A Solution&lt;/h2&gt;

&lt;p data-height=&quot;206&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;VemryE&quot; data-default-tab=&quot;result&quot; data-user=&quot;straversi&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/straversi/pen/VemryE/&quot;&gt;Text Reveal&lt;/a&gt; by Steven Traversi (&lt;a href=&quot;http://codepen.io/straversi&quot;&gt;@straversi&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The concept is focused around a span containing the text in question. A &lt;code&gt;::before&lt;/code&gt; pseudo element is added to have the width of the span. On hover, the pseudo element is translated right 100%. The &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; attributes can be used, but they’re more expensive to animate.&lt;/p&gt;

&lt;p&gt;Of course, taking advantage of CSS’s &lt;code&gt;:hover&lt;/code&gt; means we can’t use this method for mobile devices. Therefore, this solution is not super practical. Oh well.&lt;/p&gt;

&lt;p&gt;If you’re on mobile now, here’s a video of the sweet action.&lt;/p&gt;

&lt;video class=&quot;share-video&quot; id=&quot;share-video&quot; poster=&quot;https://thumbs.gfycat.com/DisastrousFlippantBeagle-poster.jpg&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt;&lt;source id=&quot;webmSource&quot; src=&quot;https://zippy.gfycat.com/DisastrousFlippantBeagle.webm&quot; type=&quot;video/webm&quot; /&gt;&lt;source id=&quot;mp4Source&quot; src=&quot;https://zippy.gfycat.com/DisastrousFlippantBeagle.mp4&quot; type=&quot;video/mp4&quot; /&gt;
    Sorry, your browser doesn&#39;t support HTML5 video.
&lt;/video&gt;
</description>
        <pubDate>Tue, 29 Dec 2015 01:47:36 -0800</pubDate>
        <link>http://steven.codes/blog/slide-to-reveal-with-css/</link>
        <guid isPermaLink="true">http://steven.codes/blog/slide-to-reveal-with-css/</guid>
        
        
      </item>
    
      <item>
        <title>Constraint Satisfaction With Sudoku</title>
        <description>&lt;h2 id=&quot;ai-a-modern-approach&quot;&gt;AI: A Modern Approach&lt;/h2&gt;

&lt;p&gt;This semester, I’ve had the pleasure of taking “Intro to Artificial Intelligence” with Stuart Russell and Pat Virtue. Russell authored the definitive &lt;strong&gt;Artificial Intelligence, A Modern Approach&lt;/strong&gt;, used as a foundation for AI curricula across the world.&lt;/p&gt;

&lt;p&gt;In the first section of the class we covered “search”, including “constraint satisfaction problems” (CSP). Constraint satisfaction is an efficient way to represent a problem as a set of variables and rules for those variables. For example, you could have two variables whose domains are integers in [0, 10] that share a “diff” constraint- in other words, they may not be assigned the same number. A solution to a CSP happens when all variables been assigned a value and no constraints are violated.&lt;/p&gt;

&lt;p&gt;The textbook &lt;strong&gt;AIAMA&lt;/strong&gt; defines a search algorithm for solving CSPs that uses “backtracking” (which is really just a fancy term for how common search strategies like DFS work inherently). Essentially, if the search finds itself at a dead end, it will back up and traverse a different branch. In the case of CSPs, a dead end is an assignment from which no more values may be given to variables without constraint violation. If the backtracking algorithm finds itself here, it will un-assign some number of variables and continue the search. The algorithm is laid out below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backtrack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unassigned&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consistent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;inferences&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inferences&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inferences&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backtrack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inferences&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;assignment&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some signatures to talk about:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;select-unassigned-variable(csp)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At this point, we choose a variable to make an assignment for. We’re not actually assigning a value to anything yet. You may wonder, does the order that we choose variables for assignment matter? The answer is yes. Many problems find useful to always pick the variable that has the smallest remaining domain. This technique is called Minimum Remaining Values (MRV).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;order-domain-values(var, assignment, csp)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The order in which we check the values in our chosen variable’s domain can make a difference as well. A common approach is to order values by how much they would affect neighboring domains. We’d like to choose the values that cause the LEAST amount of domain-constriction first. This is called Least Constraining Value (LCV).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“is consistent with assignment”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This checks if the assigning the given value to the given variable would violate any constraints. Therefore, it only involves checking the domains of variables that are constrained to the given one.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;inference(csp, var, value)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we give a variable a value, we have to prune the domains of all variables constrained with it. Sometimes, pruning a domain causes a variable to only have one value left in its domain. We could then make an assignment there, after which we could recursively begin another inference.&lt;/p&gt;

&lt;h2 id=&quot;sudoku-as-a-csp&quot;&gt;Sudoku as a CSP&lt;/h2&gt;

&lt;p&gt;I represent the various tiles of the sudoku board as A1 … I9, similarly to chess. The only constraints we need in sudoku are binary differences. E.g., “G4” != “G5”. What are the differences we need to enforce in sudoku? Each variable has 20 constraints: 8 in its row, 8 in its column, and 8 in its region; of these 24 constraints, 4 appear twice. I chose to store each variable’s constraints in a dictionary called &lt;code&gt;csp&lt;/code&gt;, mapping {variable =&amp;gt; set(variable)}. Lookup is easy: &lt;code&gt;csp[&quot;G4&quot;]&lt;/code&gt; returns a set of variables constrained to “G4”.&lt;/p&gt;

&lt;p&gt;How should we represent the variables and assignments? I tried two methods. In the first representation I attempted, the assignments of variables to values were kept in a dictionary, mapped as VARIABLE -&amp;gt; VALUE. In the second representation I tried, I represented the assignments as a dictionary mapping VARIABLE -&amp;gt; DOMAIN. I tried this out because I realized that with the first representation, the domain of each variable was being recalculated many times. The results of the switch caused a huge decrease in time taken to solve: from ~850 seconds for ~2,000 puzzles to ~35 seconds.&lt;/p&gt;

&lt;p&gt;For representing the domains of the variables with the second approach, I decided to use strings of values (because the values are strictly 1-9). So as we doing inferencing after making an assignment, some domains will have numbers in them replaced with nothing, e.g. “124589” | replace(“4”,””). This means that “4” is no longer a part of this domain.&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;Right away, we can write two methods: &lt;em&gt;solved&lt;/em&gt; and &lt;em&gt;consistent&lt;/em&gt;. We can say that an assignment is &lt;em&gt;solved&lt;/em&gt; if the length of every variable’s domain is 1. An value for a variable is &lt;em&gt;consistent&lt;/em&gt; with an assignment if no other variables are already assigned that value, i.e. if the none of the domains of the constrained variables are equal to the new value. Here are implementations:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python3&quot; data-lang=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Return TRUE if 1 assignment per tile. &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python3&quot; data-lang=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consistent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Return TRUE if no domain of variables constrained to VARIABLE equals VALUE. &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constraint&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Moving on to &lt;em&gt;select-unassigned-variable(csp)&lt;/em&gt;, we simply find a variable with the smallest domain length, since each domain is just a string of values. We have to be careful not to select variables with domain lengths == 1, because this means that the variable is already assigned. Here are two implementations:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python3&quot; data-lang=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unassigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Return an unassigned variable from CSP. Minimum Remaining Values. &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Interestingly, the above solution is much slower than the following one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python3&quot; data-lang=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unassigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bestValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bestVar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bestValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bestValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bestVar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bestVar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s ok with me, because the second version is more readable, I suppose.&lt;/p&gt;

&lt;p&gt;For &lt;em&gt;order-domain-values(var, assignment, csp)&lt;/em&gt;, I did some experimentation. I found that LCV causes a slower search than without it, for my implementation. And that’s okay: In &lt;strong&gt;AIAMA&lt;/strong&gt;, it is mentioned that “least-constraining-value heuristic can be effective in some cases”. (p. 217) Apparently, not this case, with this implementation. Therefore, I simply returned the domain of the input variable with no processing with regards to order.&lt;/p&gt;

&lt;p&gt;This leaves &lt;em&gt;inference(csp, var, value)&lt;/em&gt;, where the fun happens. If a variable/value pair makes it to this step, then &lt;em&gt;inference&lt;/em&gt;’s job is to make the assignment, then prune the domains of all constrained variables. If any variable’s domain is pruned to length 0, then the assignment has failed. If any variable’s domain is pruned to length 1, we should treat this as an assignment and call inference for that variable and value as well. Here’s my implementation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python3&quot; data-lang=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var_to_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Assign VALUE to VAR_TO_UPDATE in ASSIGNMENT. Update domains of&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;       constrained variables from CSP. If any domains are reduced to 1, also&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;       inference from them. If any domains are reduced to 0, return False.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;       Recursive forward checking.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_to_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constraint&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var_to_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The only thing left to do when setting up your main() is run an initial inference pass when the puzzle is first loaded.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;I wrote my version of the solver so that it could take puzzles from this large set I found here: &lt;a href=&quot;http://magictour.free.fr/top2365&quot;&gt;2365 hard sudoku puzzles&lt;/a&gt;. On average, my solver takes ~35 seconds to solve this set, with the median time to solve a puzzle being 0.005 seconds. The 35 seconds is dominated by a select few puzzles that take several seconds to solve.&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2015 11:47:36 -0800</pubDate>
        <link>http://steven.codes/blog/constraint-satisfaction-with-sudoku/</link>
        <guid isPermaLink="true">http://steven.codes/blog/constraint-satisfaction-with-sudoku/</guid>
        
        <category>hot</category>
        
        
      </item>
    
      <item>
        <title>My Jekyll Setup</title>
        <description>&lt;p&gt;The permalink format for posts on this site is &lt;code&gt;:categories/:title&lt;/code&gt;. That way I can direct students to steven.codes/cs10 for easy access to all cs10 resources.&lt;/p&gt;

&lt;h2 id=&quot;organizing-assets&quot;&gt;Organizing Assets&lt;/h2&gt;
&lt;p&gt;I prefer to structure assets similarly to posts. For example, if there is a post at &lt;code&gt;/cs10/2048-merge&lt;/code&gt;, then I’d like the corresponding assets to be stored in &lt;code&gt;/assets/posts/cs10/2048-merge&lt;/code&gt;. This means I have to go through this path every time I’d like to include a resource. &lt;a href=&quot;https://github.com/samrayner/jekyll-asset-path-plugin&quot;&gt;Asset path tag&lt;/a&gt; is a plugin that I use to manage these relative paths. This is what including an image looks like with asset path:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;asset_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;cat_of_the_month.png&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Many of my posts require custom JavaScript, and sometimes custom CSS (see &lt;a href=&quot;/cs10/2048-merge/&quot;&gt;2048 Merge&lt;/a&gt;). I don’t want these custom resources loading for every post, so I created two front matter variables, &lt;code&gt;custom_css&lt;/code&gt; and &lt;code&gt;custom_js&lt;/code&gt;. In &lt;code&gt;_includes/header.html&lt;/code&gt;, I added the following script:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% if page.custom_css %}
  {% for stylesheet in page.custom_css %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{% asset_path {{ stylesheet }}.css %}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;screen&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% endfor %}
{% endif %}

{% if page.custom_js %}
  {% for js_file in page.custom_js %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;{% asset_path {{ js_file }}.js %}&amp;#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  {% endfor %}
{% endif %}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some JavaScript snippets need access to the assets of the post. It would be bad practice to include file paths in the JavaScript itself. To allow for better separation of concerns, I pass asset_path to the js from the post. An example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;tileSetup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;{% asset_path 2048_tiles/%}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For the social page, I wanted a column of wide banners, one for each social site. I created the template &lt;code&gt;_includes/social-banner.html&lt;/code&gt;. There’s an image in this template: the banner background. For the &lt;code&gt;src&lt;/code&gt; attribute of the image, I capture the app name in question and use &lt;code&gt;asset_path&lt;/code&gt; to grab the appropriate image:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;asset_path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;{{&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;include.appname&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;}}.png&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To pass the app’s name, specify the &lt;code&gt;appname&lt;/code&gt; attribute in the include:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;social-banner.html&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;appname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;facebook&amp;quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;post-list&quot;&gt;Post List&lt;/h2&gt;

&lt;p&gt;There is a Posts page that contains a list of written posts. Each post’s display consists of three parts: a thumbnail, a title, and metadata. The metadata consists of a description, possible tags such as “new” or “hot”, and directory location (if applicable).&lt;/p&gt;

&lt;p&gt;Newness is determined by comparing &lt;code&gt;post.date&lt;/code&gt; to &lt;code&gt;site.time&lt;/code&gt;. If a post is new, then in the metadata section we put:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;icon-gift.html&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt; •&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;icon-gift.html&lt;/code&gt; is a file that contains an include for icon-gift.svg and the word “New”. It also handles colors. The setup is practically identical for &lt;code&gt;icon-hot.html&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;plugins&quot;&gt;Plugins&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/takuti/jekyll-lazy-tweet-embedding&quot;&gt;Lazy Tweet Embedding&lt;/a&gt; automatically converts twitter states urls to twitter cards. For example, if I concatenate &lt;code&gt;https://twitter.com/&lt;/code&gt;, &lt;code&gt;StevenTraversi/status/&lt;/code&gt;, and a tweet id such as &lt;code&gt;558448694731608064&lt;/code&gt;, the plugin will generate this for me:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Studying machine structures in Soda, &amp;quot;home of top shelf computer scientists&amp;quot;. &lt;a href=&quot;https://twitter.com/hashtag/61C?src=hash&quot;&gt;#61C&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/UCBerkeley?src=hash&quot;&gt;#UCBerkeley&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/twoscomplement?src=hash&quot;&gt;#twoscomplement&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/passbyvalue?src=hash&quot;&gt;#passbyvalue&lt;/a&gt;&lt;/p&gt;&amp;mdash; Steven Traversi (@StevenTraversi) &lt;a href=&quot;https://twitter.com/StevenTraversi/status/558448694731608064&quot;&gt;January 23, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Clean and easy.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/penibelst/jekyll-compress-html&quot;&gt;jekyll-compress-html&lt;/a&gt; is a top-level &lt;em&gt;layout&lt;/em&gt; that I make &lt;code&gt;default.html&lt;/code&gt; conform to. Therefore, every HTML file is compressed before being dumped into &lt;code&gt;_site&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Nov 2015 11:47:36 -0800</pubDate>
        <link>http://steven.codes/blog/my-jekyll-setup/</link>
        <guid isPermaLink="true">http://steven.codes/blog/my-jekyll-setup/</guid>
        
        
      </item>
    
      <item>
        <title>Simulating Gravity With a Linear Transform</title>
        <description>&lt;h1 id=&quot;testing&quot;&gt;TESTING&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/posts/simulating-gravity-with-a-linear-transform/test.png&quot; alt=&quot;Image of Yaktocat&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Nov 2015 17:47:36 -0800</pubDate>
        <link>http://steven.codes/blog/simulating-gravity-with-a-linear-transform/</link>
        <guid isPermaLink="true">http://steven.codes/blog/simulating-gravity-with-a-linear-transform/</guid>
        
        <category>draft</category>
        
        
      </item>
    
      <item>
        <title>Constant 2048 Solution</title>
        <description>&lt;h1 id=&quot;testing&quot;&gt;TESTING&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/posts/constant-2048-solution/test.png&quot; alt=&quot;Image of Yaktocat&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Nov 2015 17:47:36 -0800</pubDate>
        <link>http://steven.codes/blog/constant-2048-solution/</link>
        <guid isPermaLink="true">http://steven.codes/blog/constant-2048-solution/</guid>
        
        <category>draft</category>
        
        
      </item>
    
      <item>
        <title>2048 Merge</title>
        <description>&lt;!-- JavaScript and CSS loaded in _includes/head.html.
     Check front matter. --&gt;

&lt;p&gt;In the fad game 2048, you press arrow keys to move tiles across a board in
one of four possible directions. Let’s explore an intuitive algorithm for
accomplishing this.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;basic-slide&quot;&gt;Basic Slide&lt;/h2&gt;

&lt;p&gt;Let’s start with the case of a single tile.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;important&quot;&gt;Note:&lt;/span&gt; Throughout this exploration, we will
only ever be considering a single column. This is because in a true 2048
board with 4 columns, each column is independent from the rest when it
comes to merging tiles upward.&lt;/p&gt;

&lt;p&gt;What happens when we press the UP arrow? The tile should move up until it
hits an edge.&lt;/p&gt;

&lt;div class=&quot;board-wrapper&quot;&gt;
&lt;div class=&quot;board-2048&quot; id=&quot;board1&quot; style=&quot;width:62.5px;height:250px;&quot;&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;2&quot; data-endval=&quot;2&quot; data-begin=&quot;3&quot; data-end=&quot;0&quot; /&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;label onclick=&quot;mergeBoard(this, &#39;board1&#39;)&quot;&gt;&lt;input type=&quot;checkbox&quot; /&gt;&lt;span&gt;merge up&lt;/span&gt;&lt;/label&gt;
&lt;/div&gt;

&lt;p&gt;Let’s start a list of rules that we have to keep in mind. We’ll keep adding
to it as we go.&lt;/p&gt;

&lt;p&gt;Rules&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Move up until:
      &lt;ul&gt;
        &lt;li&gt;There is an edge&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;another-tile&quot;&gt;Another Tile&lt;/h2&gt;

&lt;p&gt;Now we’ll progress our algorithm by looking at a more complex board. It will
have two tiles of different values.&lt;/p&gt;

&lt;p&gt;What happens when we press the UP arrow? The top tile, following our rules
list, will move up until there is an edge. Then it’s the bottom tile’s turn.
It starts to move up… and then encounters a new situation. Instead of
hitting an edge, it hits another tile. What should happen?&lt;/p&gt;

&lt;div class=&quot;board-wrapper&quot;&gt;
&lt;div class=&quot;board-2048&quot; id=&quot;board2&quot; style=&quot;width:62.5px;height:250px;&quot;&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;2&quot; data-endval=&quot;2&quot; data-begin=&quot;1&quot; data-end=&quot;0&quot; /&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;4&quot; data-endval=&quot;4&quot; data-begin=&quot;3&quot; data-end=&quot;1&quot; /&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;label onclick=&quot;mergeBoard(this, &#39;board2&#39;)&quot;&gt;&lt;input type=&quot;checkbox&quot; /&gt;&lt;span&gt;merge up&lt;/span&gt;&lt;/label&gt;
&lt;/div&gt;

&lt;p&gt;The tile should stop as if it has hit an edge. It now occupies the spot
directly under the tile above it. Let’s update our rules to reflect
this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Move up until:
      &lt;ul&gt;
        &lt;li&gt;There is an edge&lt;/li&gt;
        &lt;li&gt;There is another tile&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;important&quot;&gt;Notice:&lt;/span&gt; This brings up a question. Which tile should we move up first? If we move the bottom tile up first, it would stop when it got to the
tile above it. Then we’d move the tile above it, and it’d stop at the edge.
What’s left is a gap between the two tiles! This is not what we want.
Therefore, we’ll make an observation that we should move the tiles up in
order from top to bottom.&lt;/p&gt;

&lt;h2 id=&quot;merging-tiles&quot;&gt;Merging Tiles&lt;/h2&gt;

&lt;p&gt;If you missed the notice right before this section definitely read it.&lt;/p&gt;

&lt;p&gt;Let’s make things more complex again. In our newest board, there are two
tiles of the same value.&lt;/p&gt;

&lt;p&gt;What happens when we press the UP arrow? Now things are getting interesting.
The top tile, following our rules list, will move up until there is an edge.
Then it’s the bottom tile’s turn. It starts to move up… and then
encounters a new situation. It hits another tile with the same value. What
should happen?&lt;/p&gt;

&lt;div class=&quot;board-wrapper&quot;&gt;
&lt;div class=&quot;board-2048&quot; id=&quot;board3&quot; style=&quot;width:62.5px;height:250px;&quot;&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;2&quot; data-endval=&quot;4&quot; data-begin=&quot;1&quot; data-end=&quot;0&quot; /&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;2&quot; data-endval=&quot;0&quot; data-begin=&quot;3&quot; data-end=&quot;0&quot; /&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;label onclick=&quot;mergeBoard(this, &#39;board3&#39;)&quot;&gt;&lt;input type=&quot;checkbox&quot; /&gt;&lt;span&gt;merge up&lt;/span&gt;&lt;/label&gt;
&lt;/div&gt;

&lt;p&gt;The tiles should merge into a new tile of twice their values. Let’s add a
rule:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Move up until:
      &lt;ul&gt;
        &lt;li&gt;There is an edge&lt;/li&gt;
        &lt;li&gt;There is another tile…
          &lt;ul&gt;
            &lt;li&gt;Different value? Do nothing.&lt;/li&gt;
            &lt;li&gt;Same value? Merge with it.&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;merge-mishaps&quot;&gt;Merge Mishaps&lt;/h2&gt;

&lt;p&gt;Let’s add one more twist of complexity. Our next board will have three tiles
on it: Two of the same value and one of twice their value.&lt;/p&gt;

&lt;p&gt;What happens when we press the UP arrow? The top tile, following our rules
list, will move up until there is an edge. Then it’s the next tile’s turn.
It moves up and encounters a tile. Does it have the same value? Yes it does,
so it will merge into it to make a new tile of twice its value. Then it’s
the bottom tile’s turn. It moves up, and encounters the freshly merged tile
above it… What should happen?&lt;/p&gt;

&lt;div class=&quot;board-wrapper&quot;&gt;
&lt;div class=&quot;board-2048&quot; id=&quot;board4&quot; style=&quot;width:62.5px;height:250px;&quot;&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;4&quot; data-endval=&quot;8&quot; data-begin=&quot;1&quot; data-end=&quot;0&quot; /&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;4&quot; data-endval=&quot;0&quot; data-begin=&quot;2&quot; data-end=&quot;0&quot; /&gt;
  &lt;img class=&quot;tile&quot; data-val=&quot;8&quot; data-endval=&quot;8&quot; data-begin=&quot;3&quot; data-end=&quot;1&quot; /&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;label onclick=&quot;mergeBoard(this, &#39;board4&#39;)&quot;&gt;&lt;input type=&quot;checkbox&quot; /&gt;&lt;span&gt;merge up&lt;/span&gt;&lt;/label&gt;
&lt;/div&gt;

&lt;p&gt;The third tile should stop! One of the rules of 2048 is that a tile cannot
be merged more than once per key press. Let’s add a rule to take care of
this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Move up until:
      &lt;ul&gt;
        &lt;li&gt;There is an edge&lt;/li&gt;
        &lt;li&gt;There is another tile…
          &lt;ul&gt;
            &lt;li&gt;Different value? Do nothing.&lt;/li&gt;
            &lt;li&gt;Same value?
              &lt;ul&gt;
                &lt;li&gt;Already merged that tile? Do nothing.&lt;/li&gt;
                &lt;li&gt;Haven’t merged that tile yet? Merge with it.&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have all of the parts of a perfectly fine 2048 Merging algorithm. These
simple rules are all it takes to power an addicting and popular game. There
are more things we could do: perhaps you may find it useful to keep track of
whether or not a tile has been moved as a result of attempting a merge (this
could be useful when deciding whether to add a new tile when implementing
a full 2048 game).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You can write this algorithm iteratively or recursively. Explore, and
write your own improved version now that you understand the basics.
There are many other ways to achieve the merge effect, and some solutions
can get very clever and efficient.&lt;/p&gt;

&lt;script&gt;
  /* Run setup method. Find in 2048_board_merge.js from YAML front matter. */
  tileSetup(&quot;/blog/assets/posts/cs10/2048-merge/2048_tiles/&quot;);
&lt;/script&gt;

</description>
        <pubDate>Thu, 12 Nov 2015 03:47:36 -0800</pubDate>
        <link>http://steven.codes/blog/cs10/2048-merge/</link>
        <guid isPermaLink="true">http://steven.codes/blog/cs10/2048-merge/</guid>
        
        <category>no_compress</category>
        
        
        <category>cs10</category>
        
      </item>
    
  </channel>
</rss>
