<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>steven.codes</title>
    <description>I post here about some of the things I&#39;m working on.
</description>
    <link>http://steven.codes/blog/</link>
    <atom:link href="http://steven.codes/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 18 May 2017 22:24:21 -0700</pubDate>
    <lastBuildDate>Thu, 18 May 2017 22:24:21 -0700</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Cloth Simulation</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;How would you approach making a realistic animation of a waving flag? Would you study a video of a real flag and draw each frame? That would take a long time. Would you develop a mathematical model that describes how flag surfaces move? It may be difficult to bridge the last gap between that ‘fake’ look and realism.&lt;/p&gt;

&lt;p&gt;A good way to approach it is to describe the cloth’s physical properties, the world, and physics the best we can, and “press play”. That is to say, create a simulation of the flag. The problem is open ended: How do we model the cloth? What information about the environment is important? I explored these ideas while creating a cloth simulation.&lt;/p&gt;

&lt;h2 id=&quot;masses-and-springs&quot;&gt;Masses and Springs&lt;/h2&gt;

&lt;p&gt;A good model for a cloth is a bunch of small masses and springs. A square cloth is broken up into a grid of points, instead of some continuous representation. This way, we can apply forces to a finite number of objects. Further, this makes modeling a cloth’s elastic properties easier. We can connect the point mass objects with a system of tiny springs that keep the cloth from contorting in an unnatural way. Springs act as a constraint on distance: applying a force to push away objects that are too close, or applying tension between objects that are too far.&lt;/p&gt;

&lt;p&gt;I incorporated three types of springs into the cloth model: structural, shearing, and bending.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Structural&lt;/strong&gt; springs exist between each mass in a row and column fashion. They make sure the overall topology of the cloth remains consistent. They also prevent neighboring masses from being pulled apart or pushed together.&lt;/p&gt;

&lt;div&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/cloth-simulation/1_figure_structural.jpg &quot; /&gt;
  &lt;figcaption&gt;Just structural constraints.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Shearing&lt;/strong&gt; springs reach between diagonal masses. These prevent the entire grid from collapsing to one side, like parallelogram collapsing onto its side.&lt;/p&gt;

&lt;div&gt;
&lt;figure class=&quot;half align-bot&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/cloth-simulation/1_figure_shearing_square.jpg &quot; /&gt;
  &lt;figcaption&gt;Without diagonal distance constraints or angle constraints, a square can collapse sideways.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;half align-bot&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/cloth-simulation/1_figure_shearing.jpg &quot; /&gt;
  &lt;figcaption&gt;Adding shearing springs that connect masses diagonally prevents this.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Lastly, &lt;strong&gt;bending&lt;/strong&gt; springs span two masses, and prevent the cloth from creasing perfectly in half like an infinitely thin piece of paper, which would be unrealistic. In the following image, the effect of bending constraints can be seen.&lt;/p&gt;

&lt;div&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/cloth-simulation/1_figure_bending.jpg &quot; /&gt;
  &lt;figcaption&gt;Cloth is hanging over a surface, viewed from the side. &lt;b&gt;a&lt;/b&gt; is under high compression. &lt;b&gt;b&lt;/b&gt; is under moderate compression. &lt;b&gt;c&lt;/b&gt; is under low compression.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The following image shows the springs as white lines in an example cloth. A shaded version of this cloth will be used in the simulations.&lt;/p&gt;

&lt;div&gt;
&lt;figure align=&quot;middle&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/cloth-simulation/1_cloth.png &quot; /&gt;
  &lt;figcaption&gt;View of a cloth in the simulator with all springs.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;simulation-via-numerical-integration&quot;&gt;Simulation via numerical integration&lt;/h2&gt;

&lt;p&gt;I implemented verlet integration to simulate the cloth. Verlet integration is a method of updating the point mass positions based on the forces acting on them at the given instant. It scales with the speed of the simulation, and can be damped. At each step of the simulation, verlet integration looks at every point mass in the system, aggregates the forces that are acting on it and moves the point mass to a new position based on these forces. In this case, the important forces are due to gravity and springs.&lt;/p&gt;

&lt;h3&gt;Default parameters&lt;/h3&gt;
&lt;p&gt;Here is what a &lt;em&gt;4 corners pinned&lt;/em&gt; cloth looks like with the default parameters. You can reset the simulation by pressing the &quot;reset&quot; button.&lt;/p&gt;
&lt;p&gt;&lt;button class=&quot;reset&quot; id=&quot;default&quot;&gt;reset&lt;/button&gt;&lt;/p&gt;
&lt;div&gt;
&lt;figure class=&quot;full&quot;&gt;
  &lt;video class=&quot;default&quot; autoplay=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/2_default_large.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;h3&gt;Varying spring constant&lt;/h3&gt;

&lt;p&gt;A spring’s strength is determined by its &lt;em&gt;spring constant&lt;/em&gt;, denoted as &lt;em&gt;ks&lt;/em&gt;. This number determines how strongly the strings pull on the masses in the cloth. Below, I simulate two cloths: one with a low ks, and one with a high ks. The normal ks is 5000.&lt;/p&gt;

&lt;p&gt;&lt;button class=&quot;reset&quot; id=&quot;ks&quot;&gt;reset both&lt;/button&gt;&lt;/p&gt;
&lt;div&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video class=&quot;ks&quot; autoplay=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/2_ks1000.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;ks = 1000&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video class=&quot;ks&quot; autoplay=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/2_ks25000.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;ks = 25000&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;In the low ks simulation (on the left), the cloth dips much further down than the high ks simulation (on the right). Before it comes to rest, waves in the cloth are also much more pronounced in the low ks simulation. The high ks simulation comes to rest before the low ks simulation.&lt;/p&gt;

&lt;h3&gt;Varying density&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;density&lt;/em&gt; of the cloth changes the mass of each point that the cloth is comprised of. Changing the density of the cloth changes the degree to which it is affected by forces. Below, I simulate low and high density cloths. The default density is 15.&lt;/p&gt;
&lt;p&gt;&lt;button class=&quot;reset&quot; id=&quot;density&quot;&gt;reset both&lt;/button&gt;&lt;/p&gt;
&lt;div&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video class=&quot;density&quot; autoplay=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/2_density3.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;density = 3&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video class=&quot;density&quot; autoplay=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/2_density75.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;density = 75&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;One thing to quickly notice is that the high density cloth behaves like the low ks cloth, and the low density cloth behaves like the high ks cloth. The only difference separating the changes in ks and density is that changes in ks affects the spring force contribution, while changes in density affect both spring and environmental force contributions.&lt;/p&gt;

&lt;h3&gt;Varying damping&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Damping&lt;/em&gt; controls how quickly our simulation loses energy. It is implemented in the verlet integration step of the simulation. Below, we simulate a cloth with low damping and high damping. The default damping value is 0.2.&lt;/p&gt;
&lt;p&gt;&lt;button class=&quot;reset&quot; id=&quot;damping&quot;&gt;reset both&lt;/button&gt;&lt;/p&gt;
&lt;div&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video class=&quot;damping&quot; autoplay=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/2_damping0.4.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;damping = 0.4&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video class=&quot;damping&quot; autoplay=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/2_damping1.0.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;damping = 1.0&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;The low damping simulation takes a very long time to come to rest. Small changes ripple throughout the length of the cloth well after their inception. In the over-damped simulation, the opposite occurs: the cloth smoothly falls into a resting position, with virtually no waves propagating. Notice, however, that the over-damped simulation does not come to rest in the exactly the same way as the default simulation! (scroll back up to see the default simulation).&lt;/p&gt;

&lt;h2&gt;3: Handling collisions with other objects&lt;/h2&gt;

&lt;p&gt;To create a collision with a sphere, the following steps are taken:
&lt;ol&gt;
  &lt;li&gt;If a point mass is inside a sphere object:&lt;/li&gt;
  &lt;li&gt;Bump it away from the sphere&#39;s origin to the surface.&lt;/li&gt;
  &lt;li&gt;Correct its distance from its last position by a little bit, influenced by some &lt;em&gt;friction&lt;/em&gt; value of the sphere.&lt;/li&gt;
&lt;/ol&gt;
This algorithm allows the cloth to avoid being inside of another object. I implemented the algorithm and simulated a cloth falling over a sphere, varied across &lt;em&gt;ks&lt;/em&gt; values.
&lt;/p&gt;
&lt;h3&gt;Collision with a sphere&lt;/h3&gt;
&lt;div&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/cloth-simulation/3_ks500.png &quot; /&gt;
  &lt;figcaption&gt;ks = 500&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/cloth-simulation/3_ks5000.png &quot; /&gt;
  &lt;figcaption&gt;ks = 5000&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/cloth-simulation/3_ks50000.png &quot; /&gt;
  &lt;figcaption&gt;ks = 50000&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;The first cloth looks like a very fine material, such as silk. The last cloth looks like a stiff material, such as felt. This is due to the varied spring constant values. For example, the material on the right (felt-like) has a high spring constant, so the cloth is more resistant to shearing and bending.&lt;/p&gt;

&lt;h3&gt;Collision with a plane&lt;/h3&gt;
&lt;p&gt;A similar process is implemented to detect collisions with planes. The test to see whether a collision occurs involves testing whether a point mass moves to the other side of a plane on a given simulation step. Below is the result of a cloth falling onto a plane and colliding with it.&lt;/p&gt;
&lt;div&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/cloth-simulation/3_plane.png &quot; /&gt;
  &lt;figcaption&gt;This cloth has landed on a plane.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;h2&gt;4: Handling self-collisions&lt;/h2&gt;
&lt;p&gt;To handle self-collisions, point masses in the cloth need to be tested against each other to see if their positions are smaller than double the thickness of the cloth. The naive solution would test every point against every other point, and this would be O(n^2). We can do better.&lt;/p&gt;
&lt;p&gt;To get better than quadratic in the number of point masses, we can test point masses only against their spatial neighbors. To do this, we first place all point masses into buckets based on their location in 3D space. This is called &lt;em&gt;Spatial Hashing&lt;/em&gt;. We treat 3D space as a grid of boxes and iterate over every point mass, determining which box each of them lies in. Then, we go through all boxes, and test the all of the points in each against each other. This way, we only test a point against those in the same box, instead of against ALL other points. This saves a lot of time, and for a typical cloth simulation, will be O(n).&lt;/p&gt;
&lt;p&gt;Spatial hashing involves the ability to uniquely identify each box that we&#39;ve divided the 3D space with. The way I chose to do this is as follows:

&lt;ol&gt;
  &lt;li&gt;Figure out the coordinates of the position in question in the new &quot;box-space&quot;.&lt;/li&gt;
  &lt;li&gt;Multiple each component of the new basis position by a large prime and XOR them together.&lt;/li&gt;
&lt;/ol&gt;
This is a simple but somewhat common hashing scheme.

&lt;p&gt;Below, I&#39;ve simulated a vertical falling cloth that collides with itself.&lt;/p&gt;

&lt;button class=&quot;reset&quot; id=&quot;4_default_w&quot;&gt;reset&lt;/button&gt;
&lt;div&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video class=&quot;4_default_w&quot; autoplay=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/4_default_w.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;As we can see, the cloth folds over itself instead of moving through itself. There are only a couple of frames in which the cloth intersects with itself, and these situations are infrequent. The reason this happens is because of the spatial hashing scheme: Imagine two points that are very close to each other, but fall into separate 3D boxes because their positions are near those boxes&#39; borders. They would not get tested against each other for closeness! I revisit this problem later in part 5.&lt;/p&gt;

&lt;h3&gt;Varying density&lt;/h3&gt;
&lt;p&gt;Below, I vary the density of the cloth, then simulate the self-collision situation.&lt;/p&gt;
&lt;button class=&quot;reset&quot; id=&quot;4_density&quot;&gt;reset both&lt;/button&gt;
&lt;div&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video class=&quot;4_density&quot; autoplay=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/4_density3.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;density = 3&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video class=&quot;4_density&quot; autoplay=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/4_density75.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;density = 75&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;With low density, the spring forces keep the cloth very rigid, and it folds neatly. With high density, the cloth folds messily as the point masses quickly succumb to an increased ratio of environmental to spring forces.&lt;/p&gt;

&lt;h3&gt;Varying spring constant ks&lt;/h3&gt;
&lt;p&gt;Below, I vary the spring constant ks, then simulate the self-collision situation again.&lt;/p&gt;
&lt;button class=&quot;reset&quot; id=&quot;4_ks&quot;&gt;reset both&lt;/button&gt;
&lt;div&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video class=&quot;4_ks&quot; autoplay=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/4_ks1000.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;ks = 1000&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video class=&quot;4_ks&quot; autoplay=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/4_ks25000.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;ks = 25000&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Similarly to the &lt;em&gt;4 corners pinned&lt;/em&gt; cloth earlier, it is apparent that density and ks have something of an inverse relationship in how they affect the cloth. This time, the low spring constant allows the cloth on the left to fold over on itself more easily, while the high spring constant in the cloth on the right keeps it more rigid and structured.&lt;/p&gt;

&lt;h2&gt;5.1: Wind&lt;/h2&gt;

&lt;p&gt;Wind is a spatially varying environmental force. I had fun imagining the components of an overall force due to wind. I also got to have fun using the vector field functionality of &lt;em&gt;Grapher&lt;/em&gt;, an OSX utility, to help me visualize my wind construction.&lt;/p&gt;
&lt;p&gt;I imagined that wind not only varies through space, but also time. To implement this properly, I kept track of the total amount of time since the simulation began. I used this to parameterize my wind force.&lt;/p&gt;
&lt;p&gt;I built the wind up in three steps:
&lt;ol&gt;
  &lt;li&gt;Varying the force over the z axis w/ respect to time&lt;/li&gt;
  &lt;li&gt;Varying the force over the y axis w/ respect to time&lt;/li&gt;
  &lt;li&gt;Adding a slight oscillating perturbation in the x axis w/ respect to time&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;
&lt;p&gt;Below, I show the vector fields animated over time as I add each component above.&lt;/p&gt;
&lt;div&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video autoplay=&quot;&quot; loop=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/5_wind_z1_better.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;Add &amp;#916; z = 1.5 * abs(sin(z + t * 5))&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video autoplay=&quot;&quot; loop=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/5_wind_z2_better.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;Modify to &amp;#916; z = 1.5 * abs(sin(z + t * 5) + cos(y + t * 5) / 3)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video autoplay=&quot;&quot; loop=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/5_wind_total_better.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;Add &amp;#916; x = 0.1 * sin(t * 5)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/cloth-simulation/high_wind_faster_compressed.gif &quot; alt=&quot;cloth with wind&quot; /&gt;
  &lt;figcaption&gt;The final product of applying the wind environmental force to a &lt;em&gt;2 corners pinned&lt;/em&gt; cloth.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;h2&gt;5.2: Accurate self-collisions&lt;/h2&gt;
&lt;p&gt;Remember the problem addressed at the end of section 4? In that two points may lie very close to one another but lie in separate 3D boxes? One way we can fix this is to not just search the bucket the point in question lies in while checking for closeness, but instead, check in &lt;em&gt;all the neighboring buckets&lt;/em&gt;. This way, we sacrifice some speed for correctness. I&#39;m not sure what this scheme is called, but I&#39;ve nicknamed it &lt;em&gt;Uniform Spatial Hashing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To do this, I needed to improve the hashing scheme for a box, because I needed a way to retrieve neighbor boxes once they&#39;ve been hashed. To solve this, I moved from using doubles to identify boxes to using 3D tuples to identify boxes. I had to write a 3D tuple-compatible unordered map in order to do this, but luckily I was able to reuse the idea behind hashing scheme I wrote for the doubles, with XOR.&lt;/p&gt;
&lt;p&gt;Now that a box&#39;s neighbors were identifiable, I just made sure I included all of the neighboring boxes in the search space when checking for closeness of point masses.&lt;/p&gt;
&lt;p&gt;Below, I simulate self-collision examples before and after the accuracy-boosting spatial hashing system.&lt;/p&gt;

&lt;button class=&quot;reset&quot; id=&quot;5_collision&quot;&gt;reset both&lt;/button&gt;
&lt;div&gt;
  &lt;figure class=&quot;half&quot;&gt;
    &lt;video class=&quot;5_collision&quot; autoplay=&quot;&quot;&gt;
      &lt;source src=&quot;/blog/assets/posts/cloth-simulation/4_default.webm &quot; type=&quot;video/webm&quot; /&gt;
      Please use or update Chrome to view the webm.
    &lt;/video&gt;
    &lt;figcaption&gt;Regular spatial hashing&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;video id=&quot;speedup-1&quot; class=&quot;5_collision&quot; autoplay=&quot;&quot;&gt;
    &lt;source src=&quot;/blog/assets/posts/cloth-simulation/5_uniform_spatial_hashing.webm &quot; type=&quot;video/webm&quot; /&gt;
    Please use or update Chrome to view the webm.
  &lt;/video&gt;
  &lt;figcaption&gt;Improved &quot;uniform&quot; spatial hashing&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Did you catch the improvement? I&#39;ve captured a screengrab of the cloth in similar positions in each simulation so you can see the difference. The results are below:&lt;/p&gt;
&lt;div&gt;
  &lt;figure class=&quot;half&quot;&gt;
    &lt;img src=&quot;/blog/assets/posts/cloth-simulation/5_ush_no.png &quot; alt=&quot;errors without uniform spatial hashing&quot; /&gt;
    &lt;figcaption&gt;Regular spatial hashing still allows self-intersections very occasionally, due to its imperfect accuracy.&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/cloth-simulation/5_ush_yes.png &quot; alt=&quot;no errors with uniform spatial hashing&quot; /&gt;
  &lt;figcaption&gt;My improved &quot;Uniform&quot; spatial hashing does not allow such situations.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;That&#39;s it for my experiments with cloth simulation. Thanks for reading! &amp;#9724;&lt;/p&gt;


&lt;!-- script to restart videos --&gt;
&lt;script&gt;
var buttons = document.getElementsByClassName(&quot;reset&quot;);
for (var i = 0; i &lt; buttons.length; i++) {
  buttons[i].onclick = function() {
    var videos = document.getElementsByClassName(this.id);
    for (var j = 0; j &lt; videos.length; j++) {
      videos[j].currentTime = 0;
      videos[j].play();
    }
  }
}
var s1 = document.getElementById(&quot;speedup-1&quot;);
s1.playbackRate = 3.3;

&lt;/script&gt;

&lt;/p&gt;
</description>
        <pubDate>Thu, 18 May 2017 02:47:36 -0700</pubDate>
        <link>http://steven.codes/blog/cloth-simulation/</link>
        <guid isPermaLink="true">http://steven.codes/blog/cloth-simulation/</guid>
        
        <category>hot</category>
        
        <category>published</category>
        
        
      </item>
    
      <item>
        <title>Curses Tutorial</title>
        <description>&lt;p&gt;&lt;span class=&quot;aside&quot;&gt;Last updated: November 29, 2016
&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;notice&quot;&gt;
  This tutorial requires a basic knowledge of Python. This tutorial will be
  expanded into a normal post format.
&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;python&lt;/figcaption&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;This is a tutorial for curses. Curses is a Python library that helps you handle&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;keyboard input and control the displayed text on the terminal. The tutorial&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;closely follows https://docs.python.org/3.3/howto/curses.html.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;We&amp;#39;ll jump in with the structure of a basic curses program.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;curses&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# create a window object that represents the terminal window&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initscr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Don&amp;#39;t print what I type on the terminal&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;curses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noecho&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# React to every key press, not just when pressing &amp;quot;enter&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;curses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbreak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Enable easy key codes (will come back to this)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keypad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Proceed with your program&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Running some program...&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Clean up after yourself&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;teardown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;teardown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# reverse everything that you changed about the terminal&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;curses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nocbreak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keypad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;curses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# restore the terminal to its original state&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;curses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endwin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;Unfortunately, if something goes wrong during your part of the program, it can&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;exit without running the teardown function. That could leave your terminal in&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;a weird state because curses messed with it. Curses has an answer to this&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;problem that also happens to make all of the above code a lot easier to write.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;curses&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;curses&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Clear screen&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Proceed with your program&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Running some program&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# wrapper is a function that does all of the setup and teardown, and makes sure&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# your program cleans up properly if it errors!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;Using the wrapper function is much cleaner, as you can see. From now on, we&amp;#39;ll&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;just modify what&amp;#39;s inside the function `main`, and assume we have the import and&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;the wrapper set up as above.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;Now we can learn how to handle user input.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;When the user presses a key, we want to be able to handle that action. The first&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;step in doing so is discovering which key was pressed. The function `getch` does&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;this for us. It returns a value that we can compare like so:&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;c = stdscr.getch()&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;c == ord(&amp;#39;a&amp;#39;) # Do this to check for a letter key&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;c == curses.KEY_UP # Do this to check for special keys&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;See https://docs.python.org/3.5/library/curses.html#constants for all special&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;key values.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Store the key value in the variable `c`&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Clear the terminal&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You pressed the &amp;#39;a&amp;#39; key.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You pressed the up arrow.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;This program doesn&amp;#39;t know that key.....&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;What&amp;#39;s stdscr.addstr? That&amp;#39;s curses&amp;#39; way of printing. Later, we&amp;#39;ll see that it&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;can also take arguments like y and x positions, which tell it where to print&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;the string on the terminal. For now, it just prints wherever the cursor is.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;It&amp;#39;s important to note that stdscr.clear, which is called in the block above,&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;not only clears the terminal, but also moves the cursor back to the top left.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;You may have noticed that the program waits at stdscr.getch for the user to&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;press a key. We call this behavior &amp;quot;blocking&amp;quot;, and would say that stdscr.getch&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;blocks the flow of the program. For some programs, this is useful. For others,&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;often in the case of games, this is not the desired behavior. Thankfully, curses&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;allows non-blocking key input as well.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Make stdscr.getch non-blocking&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodelay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Clear out anything else the user has typed in&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;curses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flushinp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# If the user presses p, increase the width of the springy bar&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Draw a springy bar&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stdscr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addstr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Wait 1/10 of a second. Read below to learn about how to avoid&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# problems with using time.sleep with getch!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;Calling stdscr.nodelay(True) made stdscr.getch() non-blocking. If Python gets to&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;that line and the user hasn&amp;#39;t typed anything since last time, getch will return&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;-1, which doesn&amp;#39;t match any key.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;What if the user managed to type more than one character since the last time&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;getch was called? All of those characters will start to build up, and getch will&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;return the value for each one in the order that they came. This can cause&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;delayed reactions if you&amp;#39;re writing a game. After getch, you can call&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;curses.flushinp to clear out the rest of the characters that the user typed.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;This is a good place to talk more about getch.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;Every time the user presses a key, that key&amp;#39;s value gets stored in a list. When&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;getch is called, it goes to that list and pops that value. If the user manages&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;to press several keys before getch is called, getch will pop the least recently&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;added value (the oldest key pressed). The rest of the keys remain in the list!&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;The process continues like this. So there&amp;#39;s a problem if there is a delay&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;between calls to getch: Key values can build up. If you don&amp;#39;t want this to&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;happen, curses.flushinp() clears the list of inputted values. This ensures that&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;the next key the user presses after curses.flushinp() is what getch will return&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;next time it is called.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;To continue learning about curses, checkout the addstr method to see how you can&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;print strings at certain y, x coordinates. You can start here:&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;https://docs.python.org/3/library/curses.html#window-objects&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Tue, 29 Nov 2016 03:47:36 -0800</pubDate>
        <link>http://steven.codes/blog/cs10/curses-tutorial/</link>
        <guid isPermaLink="true">http://steven.codes/blog/cs10/curses-tutorial/</guid>
        
        <category>published</category>
        
        
        <category>cs10</category>
        
      </item>
    
      <item>
        <title>Face Morphing</title>
        <description>&lt;div class=&quot;video&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/kCoy1KtH1Xk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;A face-morphing music video that I made.&lt;/p&gt;&lt;/div&gt;

&lt;h2 id=&quot;basic-morphs&quot;&gt;Basic Morphs&lt;/h2&gt;

&lt;p&gt;To morph two faces together, one can follow this rough outline:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Identify feature points on both images&lt;/li&gt;
  &lt;li&gt;Create a triangulation from one of the sets of points, and apply it to each image.&lt;/li&gt;
  &lt;li&gt;For timestep t out of N timesteps, take the weighted average of each pair of points from the two images, with weights t/N and (N-t)/N. Recover the triangulation on this new set of points. (This amounts to performing an affine transform on each triangle.)&lt;/li&gt;
  &lt;li&gt;Fill the new transformed pixels using the inverse of the affine transform from step 3 to pluck pixel values from the original images. Cross dissolve them proportionally to the timestep.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below are examples of the feature points used to morph Mozart and Beethoven. The triangulation on Mozart is the version that ended up being used.&lt;/p&gt;

&lt;figure class=&quot;third full align-top&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/face-morphing/music_gifs/lines_1.png &quot; /&gt;
  &lt;figcaption&gt;Mozart features and triangulation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third full align-top&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/face-morphing/music_gifs/linegif.gif &quot; /&gt;
  &lt;figcaption&gt;The triangulation remains intact throughout the morph&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third full align-top&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/face-morphing/music_gifs/lines_2.png &quot; /&gt;
  &lt;figcaption&gt;Beethoven features with the same triangulation&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Here’s an unmarked version of the morph, and the “halfway” face.&lt;/p&gt;

&lt;figure class=&quot;third align-top&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/face-morphing/music_gifs/mozart.gif &quot; /&gt;
  &lt;figcaption&gt;Full morph&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third align-top&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/face-morphing/music_gifs/frame_22.jpg &quot; /&gt;
  &lt;figcaption&gt;Mozthoven&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I had some fun morphing people, and sometimes things. Here are some examples:&lt;/p&gt;

&lt;figure class=&quot;third align-top&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/face-morphing/obamabush/obamabush.gif &quot; /&gt;
  &lt;figcaption&gt;Obama to Bush&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third align-top full&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/face-morphing/carloselon/carloselon.gif &quot; /&gt;
  &lt;figcaption&gt;Flores to Musk&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third align-top&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/face-morphing/campaniles/campaniles.gif &quot; /&gt;
  &lt;figcaption&gt;Campanile to Campanile&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;average-face&quot;&gt;Average Face&lt;/h2&gt;

&lt;p&gt;Here, we play around with a dataset of Danish faces. First, we try to find the “average Danish face”.&lt;/p&gt;

&lt;figure&gt;
  &lt;img class=&quot;third&quot; src=&quot;/blog/assets/posts/face-morphing/danes/01-1m.jpg &quot; /&gt;
  &lt;img class=&quot;third&quot; src=&quot;/blog/assets/posts/face-morphing/danes/05-1m.jpg &quot; /&gt;
  &lt;img class=&quot;third&quot; src=&quot;/blog/assets/posts/face-morphing/danes/15-1f.jpg &quot; /&gt;
  &lt;figcaption&gt;Original Danish faces. I then took the average symmetry of their faces.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
  &lt;img class=&quot;third&quot; src=&quot;/blog/assets/posts/face-morphing/danes/dane_0_averaged.jpg &quot; /&gt;
  &lt;img class=&quot;third&quot; src=&quot;/blog/assets/posts/face-morphing/danes/dane_4_averaged.jpg &quot; /&gt;
  &lt;img class=&quot;third&quot; src=&quot;/blog/assets/posts/face-morphing/danes/dane_14_averaged.jpg &quot; /&gt;
  &lt;figcaption&gt;I morphed each Dane into the average symmetry, then took the average color at each pixel to get the Average Dane.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Each of the original Danes’ faces define “Danish space”, as illustrated below. The average of all of the Danish faces is the “Average Dane”.&lt;/p&gt;

&lt;figure class=&quot;full&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/face-morphing/danes/danish_space.png &quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;My (Steven’s) face also exists in space, somewhere. By morphing my face to the geometry of the average Dane, we can push my face further toward the Danish space.&lt;/p&gt;

&lt;figure class=&quot;full&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/face-morphing/danes/danish_swaps.png &quot; /&gt;
  &lt;figcaption&gt;Steven&#39;s face warped to the average Dane geometry, and the average Dane face warped to Steven&#39;s geometry.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Here are the live action morphs illustrated in the above figure.&lt;/p&gt;

&lt;figure class=&quot;third align-top&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/face-morphing/danes/dane_to_steven/1.gif &quot; /&gt;
  &lt;figcaption&gt;Average dane morphed to Steven&#39;s face shape&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third align-top&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/face-morphing/danes/steven_to_dane/1.gif &quot; /&gt;
  &lt;figcaption&gt;Steven morphed to average dane&#39;s face shape&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;caricatures&quot;&gt;Caricatures&lt;/h2&gt;

&lt;p&gt;We can push the concept from the last section even further to create caricatures. What if we morphed Steven’s face &lt;em&gt;past&lt;/em&gt; the average Dane geometry, say, twice as far? That would start to expose how the geometry really compares to Steven’s. We could go the other way too: morphing Steven’s face in the &lt;em&gt;opposite&lt;/em&gt; direction from the average Dane geometry. That process would accentuate the features of Steven that are “not Danish”.&lt;/p&gt;

&lt;figure class=&quot;full&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/face-morphing/danes/danish_vector.png &quot; /&gt;
  &lt;figcaption&gt;Taking Steven&#39;s face past the average Danish geometry, and in the opposite direction.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;◼&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 02:47:36 -0700</pubDate>
        <link>http://steven.codes/blog/face-morphing/</link>
        <guid isPermaLink="true">http://steven.codes/blog/face-morphing/</guid>
        
        <category>published</category>
        
        
      </item>
    
      <item>
        <title>Gradient Domain Fusion</title>
        <description>&lt;p&gt;This post is a modified version of a site that I submitted for a project in my image manipulation class with &lt;a href=&quot;https://scholar.google.com/citations?user=d97bGd8AAAAJ&quot;&gt;Alexei Efros&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On this page, I give some quick explanations of some algorithms, but the main focus is to display and compare results. The base technique is called Poisson Blending. Its goal is to blend a &lt;em&gt;source&lt;/em&gt; image into a &lt;em&gt;target&lt;/em&gt; image. It accomplishes this by defining constraints based on the &lt;em&gt;gradients&lt;/em&gt; of the pixels in the result image. These constraints can be grouped to form a least-squares problem, which can be represented in sparse matrices and solved by a library least-squares solver.&lt;/p&gt;

&lt;h2 id=&quot;toy-problem-reconstruction&quot;&gt;Toy Problem: Reconstruction&lt;/h2&gt;

&lt;p&gt;To get used to formulating the pixel constraints as least squares problems in sparse matrices, first I practiced simply reconstructing an image given its gradient constraints and a single pixel intensity value.&lt;/p&gt;

&lt;p&gt;In other words, if we are given a matrix values representing the gradients between neighboring pixel intensities:&lt;/p&gt;

&lt;p&gt;and a single pixel intensity value, we should be able to reconstruct the original image by expanding intensity values out from the given pixel, using the gradients. The first image below is an example original, the second, the reconstructed version.&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/toy/toy_problem.png &quot; /&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/toy/reconstructed_toy.png &quot; /&gt;
  &lt;figcaption&gt;sum(|1 - 2|): 0.0305&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I was able to reduce the execution time of this reconstruction significantly (from around 15 seconds to around 4 seconds) by building the sparse constraint matrices via vectorization.&lt;/p&gt;

&lt;h2 id=&quot;poisson-blending&quot;&gt;Poisson Blending&lt;/h2&gt;

&lt;p&gt;
  One way to blend in image into another is with Poisson blending. There are
  two images: a source image, and a target image in which we want to place the
  source image. We create a mask that selects the portion of the source
  we want to blend into the target. Then, we set up the following constraints:
  &lt;ul&gt;
    &lt;li&gt;
      Pixels in the target image that aren&#39;t in the masked area should be close
      to the intensity values in the target.
    &lt;/li&gt;
    &lt;li&gt;
      The gradients of pixels in the masked area should be constrained to have
      close to the gradients of those in the source image.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/equations/poisson.png &quot; /&gt;
  &lt;figcaption&gt;v = result, t = target, s = source&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Here are some results of Poisson blending:&lt;/p&gt;

&lt;h3 id=&quot;dirski&quot;&gt;Dirski&lt;/h3&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/dirsky/dirsky.jpg &quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/dirsky/dirks.jpg &quot; /&gt;
  &lt;figcaption&gt;source&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/dirsky/oski.jpg &quot; /&gt;
  &lt;figcaption&gt;target&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/dirsky/naive_dirsky.jpg &quot; /&gt;
  &lt;figcaption&gt;naive overlay&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;mixed-gradients&quot;&gt;Mixed Gradients&lt;/h2&gt;

&lt;p&gt;Mixed gradients is just like Poisson blending, except we constrain the gradients of the pixels in the masked area to be the gradient of those in the source image OR target image: whichever has a larger magnitude. Note that this gradient choice is made on a per-gradient basis.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/equations/mixed.png &quot; /&gt;
  &lt;figcaption&gt;d_ij is the value of the gradient from the source or the target image with a larger magnitude&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 class=&quot;display&quot;&gt;
  SF Skyline&lt;span&gt; • Notice that the mixed gradients allow the tall buildings and the bridge to appear in front of the galaxy.&lt;/span&gt;
&lt;/h3&gt;

&lt;figure class=&quot;full&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/skyline2/skyline3.jpg &quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/skyline2/skyline.jpg &quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/skyline2/galaxy.jpg &quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/skyline2/polygon3.png &quot; /&gt;
&lt;/figure&gt;

&lt;h3 class=&quot;display&quot;&gt;
  Banksy on Brick&lt;span&gt; • The colors of the original piece are preserved, but toned to match the bricks. The brick texture also prevails because of its larger gradients.&lt;/span&gt;
&lt;/h3&gt;

&lt;figure class=&quot;full&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/graffiti/graffiti.jpg &quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/graffiti/bricks.jpg &quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/graffiti/graffiti.png &quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/graffiti/polygon.png &quot; /&gt;
&lt;/figure&gt;

&lt;h3 class=&quot;display&quot;&gt;
  That&#39;s No Moon&lt;span&gt; • The Death Star is faded to more match the brightness and color of the sky. Notice how the clouds float in front of the Death Star. Without mixed gradients, the clouds would simply fade out and become blurry when they got to the masked region.
&lt;/span&gt;&lt;/h3&gt;

&lt;figure class=&quot;full&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/no_moon/no_moon_2_mixed.jpg &quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/no_moon/campanile.jpg &quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/no_moon/death_star.jpg &quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/no_moon/polygon.png &quot; /&gt;
&lt;/figure&gt;

&lt;h3 class=&quot;display&quot;&gt;
  Just Dirksy Things&lt;span&gt; • Writing can be applied over images with mixed gradients. Notice how the pink background is completely disregarded because of its virtually zero gradient, while the words stand out due to the high gradient between the pink and letters.
  &lt;/span&gt;
&lt;/h3&gt;

&lt;figure class=&quot;full&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/girly_things/dirsky_things.jpg &quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/girly_things/dirks.jpg &quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/girly_things/girly_things.png &quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;third&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/girly_things/polygon.png &quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vs-laplacian-pyramid-blending&quot;&gt;Vs. Laplacian Pyramid Blending&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.opencv.org/3.1.0/dc/dff/tutorial_py_pyramids.html&quot;&gt;Laplacian blending&lt;/a&gt; is another cool way to blend images. Here’s a case when Poisson blending is clearly the way to go:&lt;/p&gt;

&lt;figure class=&quot;full&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/baby/sun_baby.jpg &quot; /&gt;
  &lt;figcaption&gt;Poisson blending&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/baby/sun_baby_laplacian.jpg &quot; /&gt;
  &lt;figcaption&gt;Laplacian pyramid blending&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/baby/naive_baby.jpg &quot; /&gt;
  &lt;figcaption&gt;naive overlay&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/baby/baby.jpg &quot; /&gt;
  &lt;figcaption&gt;source&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;half&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/gradient-domain-fusion/baby/sun.jpg &quot; /&gt;
  &lt;figcaption&gt;target&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Poisson blending was much better than Laplacian blending in this case. This is because Poisson blending was able to make the overall color palette of the baby match that of the sun, which is the intended effect. Laplacian blending can’t and doesn’t achieve that effect. Laplacian blending can be better when Poisson blending would cause an unwanted color shift.&lt;/p&gt;

&lt;p&gt;◼&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Oct 2016 02:47:36 -0700</pubDate>
        <link>http://steven.codes/blog/gradient-domain-fusion/</link>
        <guid isPermaLink="true">http://steven.codes/blog/gradient-domain-fusion/</guid>
        
        <category>hot</category>
        
        <category>published</category>
        
        
      </item>
    
      <item>
        <title>Hello World in HOtMEfSPRIbNG</title>
        <description>&lt;div class=&quot;notice&quot;&gt;
  &lt;a href=&quot;http://xeny.net/Homespring&quot;&gt;Homespring&lt;/a&gt; is an esoteric programming language based on metaphors and trees. Learning this language enough to write two basic programs was a fun challenge. On this page are the two programs and their explanations (within the context of the language)!
&lt;/div&gt;

&lt;h2 id=&quot;program&quot;&gt;Program&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;lol bear the universe hatchery
fear Hello,.   Hydro. Power pump pump pump pump future
       powers World!
 never trust the marshy marshy marshy marshy snowmelt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;structure&quot;&gt;Structure&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;                                              Hello,
                                             /
                                        fear - hydro power - pump - pump - pump - pump - future
                                       /
lol - bear - the - universe - hatchery - powers - World!
                                               \
                                                 never - trust - the - marshy - marshy - marshy - marshy - snowmelt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;explanation&quot;&gt;Explanation&lt;/h2&gt;

&lt;p&gt;Salmon begin spawning in the hatchery on the first tick. The first salmon swims toward “Hello,” where it spawns and creates a young salmon named “Hello,”. This salmon makes it back to the hatchery on the tick before the water from the spring named future activates the hydro power, which powers fear. Fear blocks the remaining salmon in the “Hello,” branch, and redirects the stream of hatchery salmon toward “World!”. The young salmon named “Hello,” makes it past the bear to the ocean. The homeless salmon that was with it is eaten by the bear. The first redirected salmon spawns at “World!”, and the young spawn makes it past the bear to the ocean. At this point, the snowmelt is out of the marsh and destroys the universe, terminating the program.&lt;/p&gt;

&lt;h2 id=&quot;challenge-wait-for-two-inputs&quot;&gt;Challenge: Wait for Two Inputs&lt;/h2&gt;

&lt;p&gt;The following is a program I wrote that waits for two lines of input from stdin, then prints out both lines together.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lo, inverse. Lock narrows bird
  hydro. Power insulated evaporates Young. sense powers rapids
   spring
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;structure-1&quot;&gt;Structure&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;                    narrows - bird
                   /
lo, - inverse lock - hydro power - insulated - evaporates - young sense - powers - rapids
                                                         \
                                                          spring
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;explanation-1&quot;&gt;Explanation&lt;/h2&gt;

&lt;p&gt;Lo, stdin waits for input. When the first input is received, creating a mature upstream salmon with its name, the mature salmon reaches a fork, and decides to visit the narrows before attempting the hydro power. The salmon makes it to the bird, where it spawns, creating a young fish, which is immediately eaten by the bird. The mature fish switches to traveling downstream, only to find itself blocked from entering the unpowered inverse lock. At this point, a second line of input may have been received, and a new salmon created. This one, however, reaches the inverse lock and must go to hydro power. This is because it cannot fit through the narrows, where the first salmon is waiting patiently. The second salmon swims through the hydro power, past evaporates, which is currently evaporating all watershed from the appropriately named spring. The salmon continues to rapids, where it spawns. The salmon and its young begin to swim downstream, but the young salmon is delayed one tick by the rapids. The young salmon does reach young sense, though, blocking the electricity from powers. Evaporates stops evaporating the spring water for one tick, long enough for the water to get past it. The water gurgles downstream, ultimately powering hydro power, unlocking the inverse lock with just enough time to let both the 1st and 2nd salmon through. By the time the young salmon from rapids get there, though, it is trapped once again, as it has passed young sense, and powers is once again allowing evaporates to evaporate the spring water, which stops the hydro power from keeping the inverse lock activated. The mature salmon whose names are the two lines from stdin reach the ocean, and print their names to stdout.&lt;/p&gt;

&lt;p&gt;◼&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Jul 2016 02:47:36 -0700</pubDate>
        <link>http://steven.codes/blog/hello-world-in-HOtMEfSPRIbNG/</link>
        <guid isPermaLink="true">http://steven.codes/blog/hello-world-in-HOtMEfSPRIbNG/</guid>
        
        <category>published</category>
        
        
      </item>
    
      <item>
        <title>Checkaroo</title>
        <description>&lt;h2 id=&quot;download--view&quot;&gt;Download / View&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/languages/html.png&quot; alt=&quot;html icon&quot; class=&quot;icon match-base-font&quot; /&gt;
 Make an account today at: &lt;a href=&quot;http://checkaroo.herokuapp.com/&quot;&gt;checkaroo.herokuapp.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-its-about&quot;&gt;What It’s About&lt;/h2&gt;

&lt;p&gt;Checkaroo solves a problem that we had as TA’s of CS10 at Berkeley. Our lab assistants needed to record their hours without involving the TA and taking up class time, but the hours needed some form of approval. With Checkaroo, lab assistants can check themselves in to their section, but their hours won’t count until their TA approves them at their leisure.&lt;/p&gt;

&lt;p&gt;I wrote the app and a suite of integration tests with Ruby on Rails, jQuery, and Cucumber. I also designed the UI, using elements from &lt;a href=&quot;http://materializecss.com/&quot; target=&quot;_blank&quot;&gt;Materialize&lt;/a&gt;.
&lt;!-- clear_ --&gt;&lt;/p&gt;

&lt;p&gt;The app just finished its beta in two UC Berkeley classes, CS61C and CS10. I’ve been using a feedback-iteration loop to improve the design and function of the application during this time. I plan to use the app to manage lab assistants again in CS10 this fall.&lt;/p&gt;

&lt;p&gt;Here are some sample images taken from the live site: (I’m currently writing this image gallery, by the way. Check it out here: &lt;a href=&quot;https://github.com/straversi/easy-gallery&quot;&gt;easy-gallery&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;image-gallery&quot;&gt;
  &lt;div class=&quot;image-container card&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/checkaroo/assistants.png &quot; class=&quot;image-group-1&quot; data-caption=&quot;The assistants whose hours are being recorded&quot; /&gt;&lt;/div&gt;
  &lt;div class=&quot;image-container card&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/checkaroo/sections.png &quot; class=&quot;image-group-1&quot; data-caption=&quot;The sections that have been created by the TAs&quot; /&gt;&lt;/div&gt;
  &lt;div class=&quot;image-container card&quot;&gt;
  &lt;img src=&quot;/blog/assets/posts/checkaroo/home.png &quot; class=&quot;image-group-1&quot; data-caption=&quot;A sample home page for a TA who has taken action on all of their assistants&#39; checkins.&quot; /&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
var firstGallery = new Gallery(&quot;image-group-1&quot;, false, &quot;/blog/assets/posts/checkaroo/svg/&quot;);
&lt;/script&gt;

</description>
        <pubDate>Thu, 30 Jun 2016 02:47:36 -0700</pubDate>
        <link>http://steven.codes/blog/checkaroo/</link>
        <guid isPermaLink="true">http://steven.codes/blog/checkaroo/</guid>
        
        <category>project</category>
        
        
      </item>
    
      <item>
        <title>Typer.js</title>
        <description>&lt;h2 id=&quot;download--get&quot;&gt;Download / Get&lt;/h2&gt;

&lt;p&gt;Get the source and documentation:&lt;br /&gt;
&lt;code&gt;$ git clone https://github.com/straversi/Typer.js.git&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;/blog/assets/languages/html.png&quot; alt=&quot;html icon&quot; class=&quot;icon match-base-font&quot; /&gt;
 Or, visit the &lt;a href=&quot;http://steven.codes/typerjs/&quot;&gt;hosted docs&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;/blog/assets/languages/github.png&quot; alt=&quot;github icon&quot; class=&quot;icon match-base-font&quot; /&gt;
 &lt;a href=&quot;https://github.com/straversi/Typer.js&quot;&gt;Github page&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-its-about&quot;&gt;What It’s About&lt;/h2&gt;

&lt;p&gt;Typer.js provides an HTML interface for creating a typing effect. For example, enter this in your HTML:&lt;br /&gt;
&lt;code&gt;Fact: &amp;lt;span class=&quot;typer&quot; id=&quot;t1&quot; data-delay=&quot;120&quot; data-words=&quot;bears,beets,battlestar galactica&quot; data-colors=&quot;#cb4b16,#d33682,#6c71c4&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;cursor&quot; data-owner=&quot;t1&quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;br /&gt;
and get this on your page:&lt;/p&gt;

&lt;p&gt;Fact: &lt;span class=&quot;typer&quot; id=&quot;t1&quot; data-delay=&quot;120&quot; data-words=&quot;bears,beets,battlestar galactica&quot; data-colors=&quot;#cb4b16,#d33682,#6c71c4&quot;&gt;&lt;/span&gt;&lt;span class=&quot;cursor&quot; data-owner=&quot;t1&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/straversi&quot; data-style=&quot;mega&quot; data-count-href=&quot;/straversi/followers&quot; data-count-api=&quot;/users/straversi#followers&quot; data-count-aria-label=&quot;# followers on GitHub&quot; aria-label=&quot;Follow @straversi on GitHub&quot;&gt;Follow @straversi&lt;/a&gt;&lt;/p&gt;

&lt;script async=&quot;&quot; defer=&quot;&quot; src=&quot;https://buttons.github.io/buttons.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;/blog/assets/posts/typer.js/typer.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Mon, 20 Jun 2016 02:47:36 -0700</pubDate>
        <link>http://steven.codes/blog/typer.js/</link>
        <guid isPermaLink="true">http://steven.codes/blog/typer.js/</guid>
        
        <category>project</category>
        
        <category>no_compress</category>
        
        
      </item>
    
      <item>
        <title>Project Template</title>
        <description>&lt;h2 id=&quot;download--goto&quot;&gt;Download / GOTO&lt;/h2&gt;

&lt;p&gt;Cool image. &lt;a href=&quot;http://github.com/straversi&quot;&gt;link to download&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;process&quot;&gt;Process&lt;/h2&gt;

&lt;p&gt;Writing about the process.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 02:47:36 -0700</pubDate>
        <link>http://steven.codes/blog/project-template/</link>
        <guid isPermaLink="true">http://steven.codes/blog/project-template/</guid>
        
        <category>project</category>
        
        <category>draft</category>
        
        
      </item>
    
      <item>
        <title>Packd</title>
        <description>&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/packd/id1024333170&quot; target=&quot;_blank&quot;&gt;
  &lt;img src=&quot;/blog/assets/app-store-button.svg&quot; alt=&quot;App store button&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;process&quot;&gt;Process&lt;/h2&gt;

&lt;p&gt;Packd is an app + service that tells you how crowded a location is. We currently serve 6 popular UC Berkeley spots, like the Engineering Library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does it work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To start counting, a venue plugs in a Raspberry Pi running Packd software. The Pi counts how many phones are communicating with the local wifi network. We use some math to normalize this number, and get a count +/- 5% of the true total.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For consumers, an App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To see how busy a public location is, we have an app that displays the live count, along with prediction graphs for each day of the week.&lt;/p&gt;

&lt;p&gt;We’re currently working on a scalable solution that is compatible with rapid expansion of Packd locations.&lt;/p&gt;

&lt;p&gt;I wrote the iOS app with Swift 2. I used storyboarding wherever possible.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 02:47:36 -0700</pubDate>
        <link>http://steven.codes/blog/packd/</link>
        <guid isPermaLink="true">http://steven.codes/blog/packd/</guid>
        
        <category>project</category>
        
        
      </item>
    
      <item>
        <title>Neural Net</title>
        <description>&lt;p&gt;The assignment was to create a Neural Network from scratch. I chose to implement the net in Python, using the numpy package for matrix manipulations. My net achieved ~98% accuracy on the MNIST dataset, which is composed of images of numbers.&lt;/p&gt;

&lt;p&gt;For the assignment, I derived the backpropagation calculations for a net with layers of size 784 ➡️ 200 ➡️ 10, with &lt;em&gt;tanh&lt;/em&gt;, then &lt;em&gt;sigmoid&lt;/em&gt; as the activation functions.&lt;/p&gt;

&lt;p&gt;To extend the assignment, I derived and implemented a general backpropagation algorithm that works with any specified number of hidden layers and units. I also implemented gradient checking via finite differences to help check the backprop during debugging.&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&quot;/blog/hw6.pdf&quot;&gt;hw6 specification&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 02:47:36 -0700</pubDate>
        <link>http://steven.codes/blog/neural-net/</link>
        <guid isPermaLink="true">http://steven.codes/blog/neural-net/</guid>
        
        <category>project</category>
        
        
      </item>
    
  </channel>
</rss>
